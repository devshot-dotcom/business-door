@use "./vars";
@use "./mixins";
@use "./typography";

// Colors.
@each $key, $value in vars.$colors {
  .text-#{$key} {
    color: map-get($value, "400");

    // Link's color swaps with theme.
    @if ($key == "link") {
      color: var(--theme-color-link);
    }
  }

  .bg-#{$key} {
    background-color: map-get($value, "400");
  }

  .bd-#{$key} {
    border-color: map-get($value, "400") !important;
  }
}

// Borders
.bd-default {
  border-color: var(--theme-color-background) !important;
}

// Show/Hide
.show {
  display: block;
}

.hide {
  display: none;
}

.show-when-sidebar-appears {
  @include mixins.when-sidebar-appears() {
    display: block;
  }
}

.hide-when-sidebar-appears {
  @include mixins.when-sidebar-appears() {
    display: none;
  }
}

.show-when-vertical-nav-appears {
  @include mixins.when-vertical-nav-appears() {
    display: block;
  }
}

.hide-when-vertical-nav-appears {
  @include mixins.when-vertical-nav-appears() {
    display: none;
  }
}

@each $breakpoint-name, $breakpoint-value in vars.$breakpoints {
  .show-on-#{$breakpoint-name} {
    display: none;

    @media (min-width: $breakpoint-value) {
      display: block;
    }
  }

  .hide-on-#{$breakpoint-name} {
    @media (min-width: $breakpoint-value) {
      display: none;
    }
  }
}

// Typography
.text-bold {
  font-weight: 700;
}

.text-default {
  color: var(--theme-color-text);
}

.text-regular {
  font-weight: 500;
}

.text-subtle {
  color: var(--theme-color-text-subtle);
}

.text-link {
  cursor: pointer;
  font-weight: 700;
  text-decoration: underline;
}

.text-ellipsis-1 {
  @include mixins.ellipsize(1);
}

.text-ellipsis-2 {
  @include mixins.ellipsize(2);
}

.text-heading {
  @include typography.h3();

  @media (min-width: vars.$breakpoint-tablet) {
    @include typography.h2();
  }
}

// Margins
.h-gap {
  > * + * {
    margin-left: vars.$size-medium;
  }

  &-small > * + * {
    margin-left: vars.$size-smaller;
  }

  &-0 {
    margin-left: 0;
  }
}

.v-gap {
  > * + * {
    margin-top: vars.$size-medium;
  }

  &-small > * + * {
    margin-top: vars.$size-smaller;
  }

  &-0 {
    margin-top: 0;
  }
}

.gap-0 {
  gap: 0;
}

// Position
.protrude-top-right {
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  transform: translate(0.25rem, 0.75rem);
}
