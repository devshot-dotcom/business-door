@use "../../sass/vars";
@use "../../sass/mixins";

/* Toast List. */
.toast-sandwich {
  position: fixed;
  width: 100vw;
  padding: vars.$size-small;
  padding-top: 0;
  margin: 0;
  list-style: none;

  @media (min-width: vars.$breakpoint-mobile) {
    width: 25rem;
  }

  &.top-left {
    top: 0;
    left: 0;
  }

  &.top-right {
    top: 0;
    right: 0;
  }

  &.bottom-right {
    bottom: 0;
    right: 0;
  }

  &.bottom-left {
    bottom: 0;
    left: 0;
  }
}

/* Toast (List Item). */
[data-theme="dark"] .coffee-toast {
  background-color: black;
}

.coffee-toast {
  background-color: white;
  padding: vars.$size-small;
  padding-left: vars.$size-small;
  margin-top: vars.$size-small;
  border-radius: vars.$size-small;
  display: flex;
  justify-content: space-between;
  gap: vars.$size-small;
  cursor: pointer;
  @include mixins.transition(all vars.$transition-fast);

  &:hover,
  &:focus-within {
    box-shadow: vars.$box-shadow-minimal;
    transform: translateY(-10%);
  }

  $variants: (
    "valid": map-get(vars.$color-valid, "400"),
    "invalid": map-get(vars.$color-invalid, "400"),
    "loading": var(--theme-color-text-subtle),
  );

  @each $variant, $color in $variants {
    &.toast-#{$variant} {
      border-bottom: calc(#{vars.$size-small} / 2) solid $color;

      .toast__icon * {
        color: $color;
      }
    }
  }
}

/* Content inside toast. */
.toast__content {
  display: flex;
  align-items: center;
  gap: vars.$size-small;

  .toast__icon {
    font-size: vars.$size-small;
    width: vars.$size-small;
    height: vars.$size-small;

    * {
      color: var(--theme-color-text);
      width: 100%;
    }
  }

  .toast__titles {
    .text-small {
      margin-top: vars.$size-small;
      color: var(--theme-color-text-subtle);
    }

    .toast__accessible-title {
      display: none;
    }
  }
}

/* Remove button of toast */
.toast__button {
  background-color: transparent;
  border: 0;
  border-radius: vars.$size-small;
  font-size: vars.$size-small;
  padding: vars.$size-small;
  cursor: pointer;
  @include mixins.transition(background-color vars.$transition-fast);

  * {
    color: var(--theme-color-text);
  }

  &:hover,
  &:focus {
    background-color: map-get(vars.$color-invalid, "400");
  }
}
