@use "../../sass/vars";
@use "../../sass/mixins";

$card-size: vars.$size-medium;

@mixin apply-outline($color) {
  border: 1px solid $color;

  &.focusable {
    &:hover,
    &:focus-within {
      border: 1px solid scale-color($color, $blackness: 25%);
    }
  }
}

@mixin apply-shadow($shadow-map) {
  box-shadow: map-get($shadow-map, "default");

  &.focusable {
    &:hover,
    &:focus-within {
      box-shadow: map-get($shadow-map, "crude");
    }
  }
}

@mixin add-variant-rules() {
  @each $color-name, $color-value in vars.$colors {
    @each $shadow-name, $shadow-map in vars.$box-shadows {
      &.outline-#{$color-name} {
        @include apply-outline(map-get($color-value, "200"));
      }

      &.background-#{$color-name} {
        background-color: map-get($color-value, "400");
      }

      &.shadow-#{$shadow-name} {
        @include apply-shadow($shadow-map);
      }
    }
  }
}

@mixin add-default-rules() {
  &.outline-default {
    @include apply-outline(map-get(vars.$color-brand, "200"));
  }

  &.background-default {
    background-color: var(--theme-color-background);
  }

  &.background-default-subtle {
    background-color: var(--theme-color-background-subtle);
  }

  &.shadow-default {
    @include apply-shadow(map-get(vars.$box-shadows, "smaller"));
  }
}

.card {
  border-radius: vars.$border-radius-small;
  padding: $card-size;
  overflow: hidden;

  @each $size-name, $size-value in vars.$sizes-compact {
    &.padding-#{$size-name} {
      padding: $size-value !important;
    }

    // The Owl Rule
    // https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/
    &.gap-#{$size-name} {
      * + *:not([data-gap-none]) {
        margin-top: $size-value !important;
      }
    }
  }

  @include mixins.transition(all vars.$transition-faster ease);
  @include add-variant-rules();
  @include add-default-rules();
}

.focusable {
  cursor: pointer;

  &:hover,
  &:focus-within {
    outline: 1px dotted var(--theme-color-link);
  }
}
